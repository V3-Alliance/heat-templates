# http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#heat-template-version
heat_template_version: 2014-10-16
# This template now works, but the load balancer seems broken :(
# This template has suddenly started falling over with ssl errors on the celometer meters :(

description: >
  NeCTAR sample template. This template installs an autoscaling WordPress deployment using a local MySQL database
  to store the data.
  It is a customization for the NeCTAR environment of the template named AutoScalingCeilometer.yaml
  in the OpenStack heat template repository.


parameters:

  # First off, the parameters that affect the environment
  key_name:
    description: Name of an existing KeyPair to enable SSH access to the instances
    type: string

  instance_type:
    description: The NeCTAR flavour the webserver is to run on
    type: string
    default: m2.xsmall
    constraints:
      - allowed_values: [m2.xsmall, m2.small]
        description:
          Must be a valid NeCTAR flavour with 10G drive, limited to the smaller ones available

  image_id:
     description: Must be a fedora image with cfn-tools installed on it
     default: d3bae233-a0cd-4533-a710-d7aa9de0a4b7
     type: string

  # Then the installation specific parameters
  db_username:
    description: The WordPress database admin account username
    default: bestAdminEver
    type: string
    constraints:
      - length: { min: 6, max: 16}
        description: The user name must be between 6 to 16 characters in length.
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: Must begin with a letter and contain only alphanumeric characters.

  db_password:
    description: The WordPress database admin account password
    type: string
    hidden: true
    constraints:
      - length: { min: 6, max: 41}
        description: Passwords must be between 6 to 41 characters in length.
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: Can only contain only alphanumeric characters.

  db_root_password:
    description: The root password for MySQL
    type: string
    hidden: true
    constraints:
      - length: { min: 6, max: 41}
        description: Passwords must be between 6 to 41 characters in length.
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: Can only contain only alphanumeric characters.


resources:

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::IAM::User
  cfn_user:
    type: AWS::IAM::User

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::IAM::AccessKey
  web_server_access_key:
    type: AWS::IAM::AccessKey
    properties:
      UserName: { get_resource:  cfn_user }

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::AutoScaling::AutoScalingGroup
  web_server_group:
    type: AWS::AutoScaling::AutoScalingGroup
    properties:
      AvailabilityZones: [melbourne, monash, QRIScloud, NCI, intersect, sa, tasmania ]
      LaunchConfigurationName: { get_resource: launch_config }
      MinSize: '1'
      MaxSize: '3'
      LoadBalancerNames:
      - { get_resource: elastic_load_blancer }
      Tags:
      - { Key: metering.server_group, Value: web_server_group }

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::AutoScaling::ScalingPolicy
  web_server_scale_up_policy:
    type: AWS::AutoScaling::ScalingPolicy
    properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: { get_resource: web_server_group }
      Cooldown: '60'
      ScalingAdjustment: '1'

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::AutoScaling::ScalingPolicy
  web_server_scale_down_policy:
    type: AWS::AutoScaling::ScalingPolicy
    properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: {get_resource: web_server_group}
      Cooldown: '60'
      ScalingAdjustment: '-1'

  # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Ceilometer::Alarm
  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 50% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: '60'
      evaluation_periods: '1'
      threshold: '50'
      alarm_actions:
      - { get_attr: [web_server_scale_up_policy, AlarmUrl] }
      matching_metadata: { 'metadata.user_metadata.groupname': { get_resource: 'web_server_group' } }
      comparison_operator: gt

  # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Ceilometer::Alarm
  cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 15% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: '60'
      evaluation_periods: '1'
      threshold: '15'
      alarm_actions:
      - { get_attr: [web_server_scale_down_policy, AlarmUrl] }
      matching_metadata: { 'metadata.user_metadata.groupname': { get_resource: 'web_server_group' } }
      comparison_operator: lt

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::ElasticLoadBalancing::LoadBalancer
  elastic_load_blancer:
    type: AWS::ElasticLoadBalancing::LoadBalancer
    properties:
      AvailabilityZones: [melbourne, monash, QRIScloud, NCI, intersect, sa, tasmania ]
      Listeners:
      - { LoadBalancerPort: '80', InstancePort: '80', Protocol: HTTP }
      HealthCheck: {Target: 'HTTP:80/', HealthyThreshold: '3', UnhealthyThreshold: '5', Interval: '30', Timeout: '5'}

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::AutoScaling::LaunchConfiguration
  launch_config:
    type: AWS::AutoScaling::LaunchConfiguration
    metadata:
      # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-credentials:
              content:
                str_replace:
                  template: |
                    AWSAccessKeyId=WebAccessKey
                    AWSSecretKey=WebSecretKey
                  params:
                    WebAccessKey: { get_resource: web_server_access_key }
                    WebSecretKey: { get_attr: [ web_server_access_key, SecretAccessKey ] }
              mode: '000400'
              owner: root
              group: root
            /tmp/setup.mysql:
              content:
                str_replace:
                  template: |
                    CREATE DATABASE wordpress;
                    GRANT ALL PRIVILEGES ON wordpress .* TO 'DBUsername'@'localhost' IDENTIFIED BY 'DBPassword';
                    FLUSH PRIVILEGES;
                    EXIT
                  params:
                    DBPassword: {get_param: db_password}
                    DBUsername: {get_param: db_username}
              mode: '000644'
              owner: root
              group: root
          packages:
            yum:
              mariadb: []
              mariadb-server: []
              httpd: []
              wordpress: []
          services:
            systemd:
              mysqld: { enabled: 'true', ensureRunning: 'true' }
              httpd: { enabled: 'true', ensureRunning: 'true' }
    properties:
      ImageId: { get_param: image_id }
      InstanceType: { get_param: instance_type }
      KeyName: { get_param: key_name }
      UserData:
        str_replace:
          template: |
            #!/bin/bash -v
            echo "StackName LaunchConfig Region" > /root/args.txt
            /opt/aws/bin/cfn-init -s StackName -r launch_config --region Region
            # Setup MySQL root password and create a user
            mysqladmin -u root password DBRootPassword
            mysql -u root --password=DBRootPassword < /tmp/setup.mysql
            sed -i "/Deny from All/d" /etc/httpd/conf.d/wordpress.conf
            sed -i "/Deny from all/d" /etc/httpd/conf.d/wordpress.conf
            sed --in-place --e s/database_name_here/wordpress/ --e s/username_here/DBUsername/ --e s/password_here/DBPassword/ /usr/share/wordpress/wp-config.php
            systemctl restart httpd.service
          params:
            StackName:  { get_param: 'OS::stack_name' }
            Region: ap-southeast-1
            DBRootPassword: { get_param: db_root_password }
            DBPassword: { get_param: db_password }
            DBUsername: { get_param: db_username }


outputs:

  url:
    description: The URL of the website
    value:
      str_replace:
        template: http://IpAddress/wordpress
        params:
          IpAddress: { get_attr: [elastic_load_blancer, DNSName]}
