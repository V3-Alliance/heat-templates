HeatTemplateFormatVersion: '2012-12-12'
# This template now works, but the load balancer seems broken :(
# This template has suddenly falled over with ssl errors :(


Description: >
  NeCTAR Sample Template:
  This template installs an autoscaling WordPress deployment using a local MySQL database
  to store the data.
  It is a customization for the NeCTAR environment of the template named AutoScalingCeilometer.yaml
  in the OpenStack heat template repository.


Parameters:

  # First off, the parameters that affect the environment
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the instances
    Type: String

  InstanceType:
    Description: The NeCTAR flavour the webserver is to run on
    Type: String
    Default: m2.xsmall
    ConstraintDescription: must be a valid NeCTAR flavour with a 10 Gig drive.

  ImageId:
     Description: A fedora image
     Default: d3bae233-a0cd-4533-a710-d7aa9de0a4b7
     Type: String

  # Then the installation specific parameters
  DBUsername:
    Default: admin
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: 'must begin with a letter and contain only alphanumeric characters.'

  DBPassword: {Default: admin, NoEcho: 'true',
    Description: The WordPress database admin account password, Type: String,
    MinLength: '1', MaxLength: '41', AllowedPattern: '[a-zA-Z0-9]*',
    ConstraintDescription: must contain only alphanumeric characters.}

  DBRootPassword: {Default: admin, NoEcho: 'true',
    Description: Root password for MySQL, Type: String,
    MinLength: '1', MaxLength: '41', AllowedPattern: '[a-zA-Z0-9]*',
    ConstraintDescription: must contain only alphanumeric characters.}

Resources:

  CfnUser: {Type: 'AWS::IAM::User'}

  WebServerKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: {Ref: CfnUser}

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      LaunchConfigurationName: {Ref: LaunchConfig}
      MinSize: '1'
      MaxSize: '3'
      LoadBalancerNames:
      - {Ref: ElasticLoadBalancer}
      Tags:
      - {Key: metering.server_group, Value: WebServerGroup}

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: {Ref: WebServerGroup}
      Cooldown: '60'
      ScalingAdjustment: '1'

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: {Ref: WebServerGroup}
      Cooldown: '60'
      ScalingAdjustment: '-1'

  CPUAlarmHigh:
    Type: OS::Ceilometer::Alarm
    Properties:
      description: Scale-up if the average CPU > 50% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: '60'
      evaluation_periods: '1'
      threshold: '50'
      alarm_actions:
      - {"Fn::GetAtt": [WebServerScaleUpPolicy, AlarmUrl]}
      matching_metadata: {'metadata.user_metadata.groupname': {Ref: 'WebServerGroup'}}
      comparison_operator: gt

  CPUAlarmLow:
    Type: OS::Ceilometer::Alarm
    Properties:
      description: Scale-down if the average CPU < 15% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: '60'
      evaluation_periods: '1'
      threshold: '15'
      alarm_actions:
      - {"Fn::GetAtt": [WebServerScaleDownPolicy, AlarmUrl]}
      matching_metadata: {'metadata.user_metadata.groupname': {Ref: 'WebServerGroup'}}
      comparison_operator: lt

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      Listeners:
      - {LoadBalancerPort: '80', InstancePort: '80',
        Protocol: HTTP}
      HealthCheck: {Target: 'HTTP:80/', HealthyThreshold: '3',
        UnhealthyThreshold: '5', Interval: '30', Timeout: '5'}

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-credentials:
              content:
                'Fn::Replace':
                - WebServerKeys: {Ref: WebServerKeys}
                  WebSecretKey: {'Fn::GetAtt': [WebServerKeys, SecretAccessKey]}
                - |
                  AWSAccessKeyId=WebServerKeys
                  AWSSecretKey=WebSecretKey
              mode: '000400'
              owner: root
              group: root
            /tmp/setup.mysql:
              content:
                'Fn::Replace':
                - DBPassword: {Ref: DBPassword}
                  DBUsername: {Ref: DBUsername}
                - |
                  CREATE DATABASE wordpress;
                  GRANT ALL PRIVILEGES ON wordpress .* TO 'DBUsername'@'localhost' IDENTIFIED BY 'DBPassword';
                  FLUSH PRIVILEGES;
                  EXIT
              mode: '000644'
              owner: root
              group: root
          packages:
            yum:
              mariadb: []
              mariadb-server: []
              httpd: []
              wordpress: []
          services:
            systemd:
              mysqld: {enabled: 'true', ensureRunning: 'true'}
              httpd: {enabled: 'true', ensureRunning: 'true'}
    Properties:
      # a fedora image with heat-cfntools installed
      ImageId: {Ref: ImageId}
      InstanceType: {Ref: InstanceType}
      KeyName: {Ref: KeyName}
      UserData:
        Fn::Base64:
          Fn::Replace:
          - 'AWS::StackName': {Ref: 'AWS::StackName'}
            'AWS::Region': {Ref: 'AWS::Region'}
            DBRootPassword: {Ref: DBRootPassword}
            DBPassword: {Ref: DBPassword}
            DBUsername: {Ref: DBUsername}
          - |
            #!/bin/bash -v
            /opt/aws/bin/cfn-init -s AWS::StackName -r LaunchConfig --region AWS::Region
            # Setup MySQL root password and create a user
            mysqladmin -u root password DBRootPassword
            mysql -u root --password=DBRootPassword < /tmp/setup.mysql
            sed -i "/Deny from All/d" /etc/httpd/conf.d/wordpress.conf
            sed -i "/Deny from all/d" /etc/httpd/conf.d/wordpress.conf
            sed --in-place --e s/database_name_here/wordpress/ --e s/username_here/DBUsername/ --e s/password_here/DBPassword/ /usr/share/wordpress/wp-config.php
            systemctl restart httpd.service


Outputs:
  URL:
    Description: The URL of the website
    Value:
      Fn::Replace:
      - IpAddress: {'Fn::GetAtt': [ElasticLoadBalancer, DNSName]}
      - http://IpAddress/wordpress
